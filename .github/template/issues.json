[
    {
        "body": "## Description\r\n\r\nCreate a simple input field with an autocomplete feature (when the user starts typing, after three characters a list of cities appear which matches that search). \r\n\r\n## Acceptance criteria\r\n\r\nCheck the items in the list below, as you are doing them:\r\n\r\n- [ ] Create an organized website structure\r\n    - `assets` (images, videos)\r\n         - Should be in a separate folder. \r\n         - Their file names need to clearly indicate what they are.\r\n         - Consider if you want some assets to also be organized in folders depending on the page they are used in.\r\n    - `styles` (CSS files)\r\n       - In a separate folder.\r\n       - You will likely need a `global` css file that is used across all pages, and separate css files that are used only on a single page.\r\n       - Read through [Organizing CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Organizing)\r\n    - `scripts` (JS files)\r\n       - In a separate folder.\r\n       - You can have a single file, or multiple files\r\n- [ ] Add a new `<input>` element to the DOM of your page.\r\n    - At a minimum, it should work similarly to https://w3collective.com/autocomplete-search-javascript/ or https://gomakethings.com/creating-an-ajax-autocomplete-component-with-html-and-vanilla-js/,\r\n    - Allowing you to select a city from a predefined list\r\n    - Feel free to get more fancy, with nicer styling\r\n- [ ] Instead of searching in a static, predefined list, integrate with a API that returns a list of cities, based on the first characters typed in the input. Examples of some services that offer city searching:\r\n    - https://airhex.com/api/cities/\r\n    - https://developers.google.com/maps/documentation/places/web-service/autocomplete\r\n    - https://apidocs.geoapify.com/playground/geocoding/#autocomplete\r\n    - Note that most of the above services require you to obtain an API key\r\n   \r\n\r\nNote that you can also try using existing libraries, like https://github.com/tomickigrzegorz/autocomplete, https://github.com/TarekRaafat/autoComplete.js or even https://slimselectjs.com/ for this, but try to understand how they work.\r\n\r\n",
        "title": "City search box with autocomplete"
    },
    {
        "body": "## Description\r\n\r\nCreate a card that shows the weather data (temperature, sky conditions, humidity, etc.) of the selected city. Searching and selecting a new city should update the card.\r\n\r\n\r\n## Acceptance criteria\r\n\r\n- [ ] Select a weather API to use:\r\n    - There are multiple APIs you can use for weather:\r\n         - [WeatherApi](https://www.weatherapi.com/docs/)\r\n         - [OpenWeatherMap](https://openweathermap.org/api)\r\n         - [OpenMeteo](https://open-meteo.com/en)\r\n         - And many other more, just search for \"free weather API\"\r\n- [ ] When we search and select a city, the weather of this city is showing up. See https://freefrontend.com/css-weather-widgets for some UI/UX ideas.\r\n- [ ] A way to access and view the forecast for the next five days.\r\n- [ ] Weather panel is showing a fetch api spinner while the content is loading. See [Sample loading fetch API spinner on Codepen](https://codepen.io/wang0nya/pen/bzwQPr) or https://cssloaders.github.io/",
        "title": "Show weather data"
    },
    {
        "body": "## Description\r\n\r\nIt would be nice to show an image that matches the city that the user has searched for. You can even go the extra mile and show a photo from the city, that also matches the current weather condition. For example, if the user searched for \"Bucharest\" and it's currently snowing in Bucharest, then show a picture of a snowy Bucharest.\r\n\r\n## Acceptance criteria\r\n\r\n- [ ]  Assign a nice background image to the chosen city that fits nicely to the site and apply it on the background. You can create object which store city name and image url.\r\n    -  You can use Pexels API to get image for chosen city dynamically. Read the official [Pexels API Documentation](https://www.pexels.com/api/documentation).\r\n    - Generate a free API key from in order to access the Pexels API.\r\n    - Use presented endpoint to get image for chosen city e.g. for Bucharest: https://api.pexels.com/v1/search?query=Bucharest",
        "title": "Show background image"
    },
    {
        "body": "## Description\r\n\r\nThere is a button to put a city into the favorites, which list shows up when the input field is selected and the input is empty (the favorite list data doesn't need to persist after a reload, but the [LocalStorage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) could be used to persist the list)\r\n\r\n## Acceptance criteria\r\n\r\n- [ ] A heart button exists next to the city name that saves it into a list\r\n- [ ] The list of favorite cities is displayed below\r\n- [ ] Selecting a city from the list automatically shows the weather in that location",
        "title": "Favorite places"
    }
]